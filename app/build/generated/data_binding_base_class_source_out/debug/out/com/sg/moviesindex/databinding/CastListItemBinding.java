// Generated by data binding compiler. Do not edit!
package com.sg.moviesindex.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import com.sg.moviesindex.R;
import com.sg.moviesindex.model.tmdb.Cast;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class CastListItemBinding extends ViewDataBinding {
  @NonNull
  public final CardView cvMovie;

  @NonNull
  public final ImageView ivProfile;

  @NonNull
  public final TextView tvCharacter;

  @NonNull
  public final TextView tvGender;

  @NonNull
  public final TextView tvName;

  @Bindable
  protected Cast mCast;

  @Bindable
  protected String mGender;

  protected CastListItemBinding(Object _bindingComponent, View _root, int _localFieldCount,
      CardView cvMovie, ImageView ivProfile, TextView tvCharacter, TextView tvGender,
      TextView tvName) {
    super(_bindingComponent, _root, _localFieldCount);
    this.cvMovie = cvMovie;
    this.ivProfile = ivProfile;
    this.tvCharacter = tvCharacter;
    this.tvGender = tvGender;
    this.tvName = tvName;
  }

  public abstract void setCast(@Nullable Cast cast);

  @Nullable
  public Cast getCast() {
    return mCast;
  }

  public abstract void setGender(@Nullable String gender);

  @Nullable
  public String getGender() {
    return mGender;
  }

  @NonNull
  public static CastListItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.cast_list_item, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static CastListItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<CastListItemBinding>inflateInternal(inflater, R.layout.cast_list_item, root, attachToRoot, component);
  }

  @NonNull
  public static CastListItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.cast_list_item, null, false, component)
   */
  @NonNull
  @Deprecated
  public static CastListItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<CastListItemBinding>inflateInternal(inflater, R.layout.cast_list_item, null, false, component);
  }

  public static CastListItemBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static CastListItemBinding bind(@NonNull View view, @Nullable Object component) {
    return (CastListItemBinding)bind(component, view, R.layout.cast_list_item);
  }
}
